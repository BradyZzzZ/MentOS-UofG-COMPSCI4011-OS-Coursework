diff --git a/TC-x86.cmake b/TC-x86.cmake
index 5a88147..5afc18e 100644
--- a/TC-x86.cmake
+++ b/TC-x86.cmake
@@ -4,22 +4,22 @@ set (CMAKE_HOST_SYSTEM_NAME Darwin)
 set(CMAKE_SYSTEM_NAME Generic)
 set(CMAKE_SYSTEM_PROCESSOR i686)
 
-set(CMAKE_TRY_COMPILE_TARGET_TYPE   STATIC_LIBRARY)
+set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
 
 # where is the target environment located
-set(CMAKE_FIND_ROOT_PATH  /opt/homebrew/Cellar/i686-elf-gcc
-                          /opt/homebrew/Cellar/i686-elf-binutils
+set(CMAKE_FIND_ROOT_PATH "$ENV{HOMEBREW_CELLAR}/i686-elf-gcc"
+                         "$ENV{HOMEBREW_CELLAR}/i686-elf-binutils"
 )
 
-set(CMAKE_AR           /opt/homebrew/bin/i686-elf-ar)
-set(CMAKE_ASM_COMPILER /opt/homebrew/bin/i686-elf-gcc)
-set(CMAKE_C_COMPILER   /opt/homebrew/bin/i686-elf-gcc)
-set(CMAKE_CXX_COMPILER /opt/homebrew/bin/i686-elf-g++)
-set(CMAKE_LINKER       /opt/homebrew/bin/i686-elf-ld)
-set(CMAKE_OBJCOPY      /opt/homebrew/bin/i686-elf-objcopy)
-set(CMAKE_RANLIB       /opt/homebrew/bin/i686-elf-ranlib)
-set(CMAKE_SIZE         /opt/homebrew/bin/i686-elf-size)
-set(CMAKE_STRIP        /opt/homebrew/bin/i686-elf-strip)
+set(CMAKE_AR           "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-ar")
+set(CMAKE_ASM_COMPILER "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-gcc")
+set(CMAKE_C_COMPILER   "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-gcc")
+set(CMAKE_CXX_COMPILER "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-g++")
+set(CMAKE_LINKER       "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-ld")
+set(CMAKE_OBJCOPY      "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-objcopy")
+set(CMAKE_RANLIB       "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-ranlib")
+set(CMAKE_SIZE         "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-size")
+set(CMAKE_STRIP        "$ENV{HOMEBREW_PREFIX}/bin/i686-elf-strip")
 
 
 
diff --git a/mentos/inc/process/scheduler.h b/mentos/inc/process/scheduler.h
index 5a969af..c1c7852 100644
--- a/mentos/inc/process/scheduler.h
+++ b/mentos/inc/process/scheduler.h
@@ -9,6 +9,20 @@
 #include "process/process.h"
 #include "stddef.h"
 
+// * Task 2: Constants for fixed-point arithmetic and load average calculation
+#define FSHIFT 11        // Number of bits of precision
+#define FIXED_1 (1<<FSHIFT)     // 1.0 as fixed-point
+#define EXP_1 1884       // 1/exp(5sec/1min)
+#define EXP_5 2014       // 1/exp(5sec/5min)
+#define EXP_15 2037      // 1/exp(5sec/15min)
+#define LOAD_FREQ (5 * TICKS_PER_SECOND)   // 5s
+
+// * Task 2: CALC_LOAD macro as provided in the material
+#define CALC_LOAD(load, exp, n) \
+  load *= exp; \
+  load += n * (FIXED_1 - exp); \
+  load >>= FSHIFT; 
+
 /// @brief Structure that contains information about live processes.
 typedef struct runqueue_t {
     /// Number of queued processes.
@@ -19,6 +33,8 @@ typedef struct runqueue_t {
     list_head queue;
     /// The current running process.
     task_struct *curr;
+    // * Task 2 : Add a var to get the most current pid
+    pid_t last_pid;
 } runqueue_t;
 
 /// @brief Structure that describes scheduling parameters.
@@ -116,3 +132,25 @@ int is_orphaned_pgrp(pid_t gid);
 /// @brief Exit the current process with status
 /// @param status The exit status of the current process
 void do_exit(int status);
+
+// * Task 2 : The new implemented functions in "scheduler.c"
+// Updating the loadavg
+void update_load_averages(size_t ticks);
+
+// Get the loadavg number with fixed-point - 1 min
+size_t scheduler_get_loadavg_1min(void);
+
+// Get the loadavg number with fixed-point - 5 min
+size_t scheduler_get_loadavg_5min(void);
+
+// Get the loadavg number with fixed-point - 15 min
+size_t scheduler_get_loadavg_15min(void);
+
+// Get the total number of all processes
+size_t scheduler_get_total_processes(void);
+
+// Get the number of running processes
+size_t scheduler_get_running_processes(void);
+
+// Get the most recent process's PID
+pid_t get_last_pid(void);
\ No newline at end of file
diff --git a/mentos/src/hardware/timer.c b/mentos/src/hardware/timer.c
index 6a62256..dadb82d 100644
--- a/mentos/src/hardware/timer.c
+++ b/mentos/src/hardware/timer.c
@@ -101,6 +101,8 @@ void timer_handler(pt_regs *reg)
     switch_fpu();
     // Check if a second has passed.
     ++timer_ticks;
+    // * Task 2
+    update_load_averages(1);
     // Update all timers
     run_timer_softirq();
     // Perform the schedule.
diff --git a/mentos/src/io/proc_system.c b/mentos/src/io/proc_system.c
index ad9761c..713e1ba 100644
--- a/mentos/src/io/proc_system.c
+++ b/mentos/src/io/proc_system.c
@@ -11,6 +11,14 @@
 #include "string.h"
 #include "sys/errno.h"
 #include "version.h"
+// * Task 1: Add cpuid.h
+#include "hardware/cpuid.h"
+// * Task 2: Add scheduler.h
+#include "process/scheduler.h"
+
+// * Task 2: Define functions to calculate integer and decimal parts separately for loadavg
+#define LOAD_INT(x) ((x) >> FSHIFT)
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
 
 static ssize_t procs_do_uptime(char *buffer, size_t bufsize);
 
@@ -24,6 +32,9 @@ static ssize_t procs_do_meminfo(char *buffer, size_t bufsize);
 
 static ssize_t procs_do_stat(char *buffer, size_t bufsize);
 
+// * Task 2: Add a new function for loadavg
+static ssize_t procs_do_loadavg(char *buffer, size_t bufsize);
+
 static ssize_t __procs_read(vfs_file_t *file, char *buf, off_t offset, size_t nbyte)
 {
     if (!file) {
@@ -52,6 +63,9 @@ static ssize_t __procs_read(vfs_file_t *file, char *buf, off_t offset, size_t nb
         ret = procs_do_meminfo(buffer, BUFSIZ);
     } else if (strcmp(entry->name, "stat") == 0) {
         ret = procs_do_stat(buffer, BUFSIZ);
+    } else if (strcmp(entry->name, "loadavg") == 0) {
+        // * Task 2: The new function for loadavg
+        ret = procs_do_loadavg(buffer, BUFSIZ); 
     }
     // Perform read.
     ssize_t it = 0;
@@ -154,6 +168,18 @@ int procs_module_init(void)
     // Set the specific operations.
     system_entry->sys_operations = &procs_sys_operations;
     system_entry->fs_operations  = &procs_fs_operations;
+
+    // * Task 2: Register the /proc/loadavg entry
+    // == /proc/loadavg ========================================================
+    if ((system_entry = proc_create_entry("loadavg", NULL)) == NULL) {
+        pr_err("Cannot create `/proc/loadavg`.\n");
+        return 1;
+    }
+    pr_debug("Created `/proc/loadavg` (%p)\n", system_entry);
+    // Set the specific operations for loadavg.
+    system_entry->sys_operations = &procs_sys_operations;
+    system_entry->fs_operations  = &procs_fs_operations;
+    
     return 0;
 }
 
@@ -179,8 +205,20 @@ static ssize_t procs_do_mounts(char *buffer, size_t bufsize)
     return 0;
 }
 
+// * Task 1: Hook up to procs_do_cpuinfo function
 static ssize_t procs_do_cpuinfo(char *buffer, size_t bufsize)
 {
+    get_cpuid(&sinfo);
+    sprintf(buffer,
+             "Vendor ID: %s\n"
+             "CPU Type: %s\n"
+             "CPU Family: %u\n"
+             "CPU Model: %u\n"
+             "APIC ID: %u\n"
+             "Brand String: %s\n",
+             sinfo.cpu_vendor, sinfo.cpu_type, sinfo.cpu_family,
+             sinfo.cpu_model, sinfo.apic_id, sinfo.brand_string);
+
     return 0;
 }
 
@@ -211,3 +249,27 @@ static ssize_t procs_do_stat(char *buffer, size_t bufsize)
 {
     return 0;
 }
+
+// * Task 2: Add a new function for loadavg
+static ssize_t procs_do_loadavg(char *buffer, size_t bufsize) 
+{
+    // Get the loadavg number with fixed-point and scaling
+    size_t load1 = scheduler_get_loadavg_1min() * (FIXED_1/200);
+    size_t load5 = scheduler_get_loadavg_5min()* (FIXED_1/200);
+    size_t load15 = scheduler_get_loadavg_15min()* (FIXED_1/200);
+
+    // Get the number of running processes and total processes
+    int running_tasks = scheduler_get_running_processes();
+    int total_tasks = scheduler_get_total_processes();
+
+    // Get the last pid
+    pid_t last_pid = get_last_pid();
+
+    sprintf(buffer, "%d.%02d %d.%02d %d.%02d %d/%d %d\n",
+                       LOAD_INT(load1), LOAD_FRAC(load1),
+                       LOAD_INT(load5), LOAD_FRAC(load5),
+                       LOAD_INT(load15), LOAD_FRAC(load15), 
+                       running_tasks, total_tasks, last_pid);
+
+    return 0;
+}
diff --git a/mentos/src/process/scheduler.c b/mentos/src/process/scheduler.c
index e0192f1..df8bfe1 100644
--- a/mentos/src/process/scheduler.c
+++ b/mentos/src/process/scheduler.c
@@ -30,6 +30,11 @@ extern void enter_userspace(uintptr_t location, uintptr_t stack);
 /// The list of processes.
 runqueue_t runqueue;
 
+// * Task 2: Global var for loadavg calculation
+static size_t loadavg_1min = 0;
+static size_t loadavg_5min = 0;
+static size_t loadavg_15min = 0;
+
 void scheduler_initialize(void)
 {
     // Initialize the runqueue list of tasks.
@@ -38,6 +43,9 @@ void scheduler_initialize(void)
     runqueue.curr = NULL;
     // Reset the number of active tasks.
     runqueue.num_active = 0;
+
+    // * Task 2: Initialization for tracking the most recent PID
+    runqueue.last_pid = 0;
 }
 
 uint32_t scheduler_getpid(void)
@@ -45,6 +53,9 @@ uint32_t scheduler_getpid(void)
     /// The current unused PID.
     static unsigned long int tid = 1;
 
+    // * Task 2: Update the most recent pid
+    runqueue.last_pid = tid;
+
     // Return the pid and increment.
     return tid++;
 }
@@ -772,3 +783,65 @@ int sys_waitperiod(void)
     current->se.executed = true;
     return 0;
 }
+
+// * Task 2: Add a new function for updating the loadavg
+void update_load_averages(size_t ticks) {
+    static int count = LOAD_FREQ;
+    size_t active_tasks = scheduler_get_active_processes() * FIXED_1;
+    
+    count -= ticks;
+    if (count <= 0) {
+        count += LOAD_FREQ;
+        CALC_LOAD(loadavg_1min, EXP_1, active_tasks);
+        CALC_LOAD(loadavg_5min, EXP_5, active_tasks);
+        CALC_LOAD(loadavg_15min, EXP_15, active_tasks);
+    }
+}
+
+// * Task 2: Get the loadavg number with fixed-point - 1 min
+size_t scheduler_get_loadavg_1min(void) {
+    return loadavg_1min;
+}
+
+// * Task 2: Get the loadavg number with fixed-point - 5 min
+size_t scheduler_get_loadavg_5min(void) {
+    return loadavg_5min;
+}
+
+// * Task 2: Get the loadavg number with fixed-point - 15 min
+size_t scheduler_get_loadavg_15min(void) {
+    return loadavg_15min;
+}
+
+// * Task 2: Add a new function for get the total number of all processes
+size_t scheduler_get_total_processes(void) {
+    size_t total_tasks = 0;
+
+    // Iterate over the task list to count the total number of tasks
+    list_for_each_decl(it, &runqueue.queue) {
+        total_tasks++;
+    }
+
+    return total_tasks;
+}
+
+// * Task 2: Add a new function for get the number of running processes
+size_t scheduler_get_running_processes(void) {
+    size_t running_tasks = 0;
+    task_struct *task;
+
+    // Iterate over the task list to count the number of running tasks
+    list_for_each_decl(it, &runqueue.queue) {
+        task = list_entry(it, task_struct, run_list);
+        if (task->state == TASK_RUNNING) {
+            running_tasks++;
+        }
+    }
+
+    return running_tasks;
+}
+
+// * Task 2: Add a new function to get the most recent process's PID
+pid_t get_last_pid(void) {
+    return runqueue.last_pid;
+}
\ No newline at end of file
diff --git a/programs/CMakeLists.txt b/programs/CMakeLists.txt
index 02c6173..8b4009e 100644
--- a/programs/CMakeLists.txt
+++ b/programs/CMakeLists.txt
@@ -28,6 +28,7 @@ set(PROGRAM_LIST
     uptime.c
     pwd.c
     env.c
+    observe.c
 )
 
 # Set the directory where the compiled binaries will be placed.
